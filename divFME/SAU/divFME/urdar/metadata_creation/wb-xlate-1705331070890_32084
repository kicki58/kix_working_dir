#! encoding="UTF-8"
#    Command line to run this workspace:
#        "C:\Program Files\FME2022_1_3\fme.exe" "C:/Users/krima354/Work Folders/Documents/GitHub/kix_working_dir/divFME/urdar/metadata_creation\wb-xlate-1705331070890_32084"
#          --DestDataset_OGCGEOPACKAGE "C:\Users\krima354\Work Folders\Documents\kicki_arbetsfiler\slask\urdar_all_geom20240115.gpkg"
#          --FME_LAUNCH_VIEWER_APP "YES"
#    

MACRO FME_MF_NAME 1_intrasis_archive_write_geom_runner_v2.fmw
MACRO FME_MF_NAME_MASTER 1_intrasis_archive_write_geom_runner_v2.fmw

FME_PYTHON_VERSION 39
ARCGIS_COMPATIBILITY ARCGIS_AUTO
# ============================================================================
DEFAULT_MACRO DestDataset_OGCGEOPACKAGE C:\Users\krima354\Work Folders\Documents\kicki_arbetsfiler\slask\urdar_all_geom20240115.gpkg

DEFAULT_MACRO FME_DATA_REPOSITORY 

DEFAULT_MACRO FME_ENGINE 

DEFAULT_MACRO FME_JOB_ID 

DEFAULT_MACRO FME_SECURITY_ROLES 

DEFAULT_MACRO FME_SECURITY_USER 

DEFAULT_MACRO FME_SERVER_DEST_DIR 

DEFAULT_MACRO FME_SERVER_HOST 

DEFAULT_MACRO FME_SERVER_PORT 

DEFAULT_MACRO FME_SERVER_REQUEST_HEADERS 

DEFAULT_MACRO FME_SERVER_REQUEST_METHOD 

DEFAULT_MACRO FME_SERVER_REQUEST_PARAMETERS 

DEFAULT_MACRO FME_SERVER_REQUEST_URI 

DEFAULT_MACRO FME_SERVER_RUNTIME_USER 

DEFAULT_MACRO FME_SERVER_RUNTIME_USER_ID 

DEFAULT_MACRO FME_SERVER_WEB_URL 

DEFAULT_MACRO FME_SHAREDRESOURCE_BACKUP 

DEFAULT_MACRO FME_SHAREDRESOURCE_DASHBOARD 

DEFAULT_MACRO FME_SHAREDRESOURCE_DATA 

DEFAULT_MACRO FME_SHAREDRESOURCE_ENGINE 

DEFAULT_MACRO FME_SHAREDRESOURCE_LOG 

DEFAULT_MACRO FME_SHAREDRESOURCE_SYSTEM 

DEFAULT_MACRO FME_SHAREDRESOURCE_TEMP 

DEFAULT_MACRO FME_TOPIC 

DEFAULT_MACRO FME_TOPIC_MESSAGE 

# ============================================================================
INCLUDE [ if {{$(DestDataset_OGCGEOPACKAGE$encode)} == {}} { puts_real {Parameter 'DestDataset_OGCGEOPACKAGE' must be given a value.}; exit 1; }; ]
#! START_HEADER
#! START_WB_HEADER
READER_TYPE MULTI_READER
WRITER_TYPE NULL
WRITER_KEYWORD NULL_DEST
NULL_DEST_DATASET null
#! END_WB_HEADER
#! START_WB_HEADER
#! END_WB_HEADER
#! END_HEADER

LOG_END_BANNER 
LOG_END_BANNER Feature caches have been recorded at every stage of the translation.
LOG_END_BANNER To inspect the recorded features,
LOG_END_BANNER click the feature cache icons next to the ports.
LOG_END_BANNER 
LOG_FILENAME "$(FME_MF_DIR)1_intrasis_archive_write_geom_runner_v2.log"
LOG_APPEND YES
LOG_FILTER_MASK -1
LOG_MAX_FEATURES 200
LOG_MAX_RECORDED_FEATURES 200
FME_REPROJECTION_ENGINE FME
FME_IMPLICIT_CSMAP_REPROJECTION_MODE Auto
FME_GEOMETRY_HANDLING Enhanced
FME_STROKE_MAX_DEVIATION 0
FME_NAMES_ENCODING UTF-8
FME_BULK_MODE_THRESHOLD 2000
# -------------------------------------------------------------------------

MULTI_READER_CONTINUE_ON_READER_FAILURE No

# -------------------------------------------------------------------------

MACRO WORKSPACE_NAME 1_intrasis_archive_write_geom_runner_v2
MACRO FME_VIEWER_APP fmedatainspector
DEFAULT_MACRO WB_CURRENT_CONTEXT
# -------------------------------------------------------------------------
.metadata XFORMER_BEGIN SQLCreator;8:Main
MACRO SQLCreator_DIRECTIVES QUERY_FEATURE_TYPES_FOR_MERGE_FILTERS Yes READ_TIME_WITH_TIMEZONE Yes NAMED_CONNECTION postgres<at>uuc-srv390_5433 CREATE_FEATURE_TABLES_FROM_DATA Yes
FACTORY_DEF {*} CreationFactory    FACTORY_NAME { SQLCreator_Creator }    OUTPUT { FEATURE_TYPE _____CREATED______ }
FACTORY_DEF {*} QueryFactory    FACTORY_NAME { SQLCreator }    INPUT FEATURE_TYPE _____CREATED______    QUERY_SQL            { SELECT<space>datname<space>FROM<space>pg_database }    COMBINE_ATTRIBUTES   RESULT_ONLY    COMBINE_GEOMETRY     RESULT_ONLY    READER_TYPE          { POSTGRES   }    READER_DATASET       { "postgres<at>uuc-srv390_5433" }    READER_PARAMS        { $(SQLCreator_DIRECTIVES) }    QUERYFCT_OUTPUT      { "BASED_ON_CONNECTIONS" }    QUERYFCT_PROPAGATE_IDS_ON_SQL_EXECUTE YES    CONTINUE_ON_READER_ERROR YES    OUTPUT { RESULT FEATURE_TYPE SQLCreator_RESULT        @SupplyAttributes(fme_feature_type,SQLCreator)         }    OUTPUT { SCHEMA FEATURE_TYPE SQLCreator_<SCHEMA>           }    OUTPUT { READER_ERROR FEATURE_TYPE SQLCreator_<REJECTED>         }
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "SQLCreator_<SCHEMA> Feature Recorder -1 2147549192" INPUT FEATURE_TYPE SQLCreator_<SCHEMA> FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_SQLCreator -1 8 fo 0 _lt_SCHEMA_gt_  0  acbdbd5d0e198bc276aa944ad177d88924cc9c57.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { fme_feature_type_name,buffer,attribute<opencurly><closecurly>.name,buffer,attribute<opencurly><closecurly>.fme_data_type,buffer,attribute<opencurly><closecurly>.native_data_type,buffer,fme_basename,buffer }  FEAT_TYPE_DISPLAY_NAME { SQLCreator_<lt>Schema<gt> } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "SQLCreator_RESULT Feature Recorder -1 2147614728" INPUT FEATURE_TYPE SQLCreator_RESULT FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_SQLCreator -1 8 fo 1 RESULT  0  5450f25103006b9f8a11aa9169f1c36fdba089dc.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { datname,buffer }  FEAT_TYPE_DISPLAY_NAME { SQLCreator_Result } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "SQLCreator_<REJECTED> Feature Recorder -1 2147680264" INPUT FEATURE_TYPE SQLCreator_<REJECTED> FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_SQLCreator -1 8 fo 2 _lt_REJECTED_gt_  0  953a108010694dd62bcea45059c8b03f479bd764.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { _reader_error,buffer,datname,buffer }  FEAT_TYPE_DISPLAY_NAME { SQLCreator_<lt>Rejected<gt> } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
.metadata XFORMER_END SQLCreator;8:Main
FACTORY_DEF * TeeFactory   FACTORY_NAME "SQLCreator_<SCHEMA> Feature Counter -1 2147549192"   INPUT FEATURE_TYPE SQLCreator_<SCHEMA>     @LogCount("PORT -1 2147549192")   NO_LOGGING 
FACTORY_DEF * TeeFactory   FACTORY_NAME "SQLCreator_RESULT Feature Counter -1 11"   INPUT FEATURE_TYPE SQLCreator_RESULT   NO_LOGGING    OUTPUT FEATURE_TYPE *     @LogCount("LINK -1 11")
FACTORY_DEF * BranchingFactory   FACTORY_NAME "SQLCreator_RESULT Brancher -1 11"   INPUT FEATURE_TYPE SQLCreator_RESULT   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * TeeFactory   FACTORY_NAME "SQLCreator_<REJECTED> Feature Counter -1 2147680264"   INPUT FEATURE_TYPE SQLCreator_<REJECTED>     @LogCount("PORT -1 2147680264")   NO_LOGGING    OUTPUT FEATURE_TYPE *
DEFAULT_MACRO _WB_BYPASS_TERMINATION No
FACTORY_DEF * TeeFactory FACTORY_NAME SQLCreator_<Rejected> INPUT FEATURE_TYPE SQLCreator_<REJECTED>  NO_LOGGING   OUTPUT FAILED FEATURE_TYPE * @Abort(ENCODED, SQLCreator<space>output<space>a<space><lt>Rejected<gt><space>feature.<space><space>To<space>continue<space>translation<space>when<space>features<space>are<space>rejected<comma><space>change<space><apos>Workspace<space>Parameters<apos><space><gt><space>Translation<space><gt><space><apos>Rejected<space>Feature<space>Handling<apos><space>to<space><apos>Continue<space>Translation<apos>)
# -------------------------------------------------------------------------
FACTORY_DEF * TeeFactory   FACTORY_NAME "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   INPUT FEATURE_TYPE *  OUTPUT FEATURE_TYPE *
# -------------------------------------------------------------------------
.metadata XFORMER_BEGIN TestFilter;10:Main
FACTORY_DEF {*} TeeFactory    FACTORY_NAME { TestFilter_INPUT }    INPUT  FEATURE_TYPE SQLCreator_RESULT    OUTPUT FEATURE_TYPE TestFilter_INPUTLINE
FACTORY_DEF {*} TestFactory FACTORY_NAME TestFilter INPUT FEATURE_TYPE TestFilter_INPUTLINE FEATURE_TABLE_SHIM_SUPPORT Yes PRESERVE_FEATURE_ORDER PER_OUTPUT_PORT PASSED_TEST_GROUP_OUTPUT FIRST TEST_GROUP TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = postgis20 ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = postgis_db ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = template0 ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = postgres ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = urdar_template ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = dap_data ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = template1 ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = template_postgis_20 ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = intrasislicense ENCODED } TEST { @EvaluateExpression(FDIV,STRING_ENCODED,<at>Value<openparen>datname<closeparen>,TestFilter) = jens ENCODED } BOOLEAN_OPERATOR OR COMPOSITE_TEST_EXPR "1 OR 2 OR 3 OR 4 OR 5 OR 6 OR 7 OR 8 OR 9 OR 10" OUTPUT PASSED_0 FEATURE_TYPE TestFilter_ej_intrasis_db OUTPUT FAILED FEATURE_TYPE TestFilter_<lt>UNFILTERED<gt>
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "TestFilter_ej_intrasis_db Feature Recorder -1 2147614730" INPUT FEATURE_TYPE TestFilter_ej_intrasis_db FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_TestFilter -1 10 fo 0 ej_intrasis_db  0  218305e6faedf9acd6361b4f34b2af1d603df2d4.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { datname,buffer }  FEAT_TYPE_DISPLAY_NAME { TestFilter_ej_intrasis_db } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "TestFilter_<lt>UNFILTERED<gt> Feature Recorder -1 2147680266" INPUT FEATURE_TYPE TestFilter_<lt>UNFILTERED<gt> FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_TestFilter -1 10 fo 1 _lt_lt_gt_UNFILTERED_lt_gt_gt_  0  85d87e1e141150078dbf5019f2706609694d2eda.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { datname,buffer }  FEAT_TYPE_DISPLAY_NAME { TestFilter_<lt>Unfiltered<gt> } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
.metadata XFORMER_END TestFilter;10:Main
FACTORY_DEF * TeeFactory   FACTORY_NAME "TestFilter_ej_intrasis_db Feature Counter -1 2147614730"   INPUT FEATURE_TYPE TestFilter_ej_intrasis_db     @LogCount("PORT -1 2147614730")   NO_LOGGING 
FACTORY_DEF * TeeFactory   FACTORY_NAME "TestFilter_<lt>UNFILTERED<gt> Feature Counter -1 12"   INPUT FEATURE_TYPE TestFilter_<lt>UNFILTERED<gt>   NO_LOGGING    OUTPUT FEATURE_TYPE *     @LogCount("LINK -1 12")
# -------------------------------------------------------------------------
.metadata XFORMER_BEGIN WorkspaceRunner;5:Main
# Create a FME_UUID_SAFE from the FME_UUID so we can use it for Tcl identifiers (FMEDESKTOP-11308)
INCLUDE [ FME_CleanseFMEUUID {WorkspaceRunner_05c12687_bfd9_48df_9594_09e36fc1ab100} ]
# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)
# PR#83334 - On Windows when we are creating child process asynchronously
# (BLOCKING == NO), we use FME's @System() call (FME_Execute System) ensuring
# that the child process doesn't inherit handles from parent process. This allows
# parent process to close feature caches and not depend on spawned processes.
Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};         set ::__platform__ {windows};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};         set ::__platform__ {unix};      };
# ------------------------------------------------------------------------------
# Quote parameter strings for inclusion in command file using raw strings, with
# a tag computed to be unique within source string ${_uniq_=_sourceString_=_uniq_}
# [FMEENGINE-62584]
Tcl2 proc quotifyForParameterFileV3a { sourceString } {   if {[string length $sourceString] == 0} {      return {\"\"};   };   if {[regexp {[^a-zA-Z0-9_]} $sourceString]} {     set uniq {};     while {[string first [format \"=%s\}\" $uniq] $sourceString] >= 0} {       if {[catch {incr uniq}]} { set uniq 0 };     };     return [format \"$\{%s=%s=%s\}\" $uniq $sourceString $uniq];   } else {     return $sourceString;   }; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run. <parmListString> consists of
# parmeter name and value pairs. Value part is always wwjd encoded whether it is
# literal value or resolved expression value resulting from @EvaluateExpression().
# Each value part had to be wwjd encoded because mapping file parsing was mangling
# the values by removing double quotes and spaces when passed in to this Tcl routine.
Tcl2 proc $(FME_UUID_SAFE)_runner { parmListString workspaceFile } {    global $(FME_UUID_SAFE)_commands;    global $(FME_UUID_SAFE)_batch_count;    incr $(FME_UUID_SAFE)_batch_count 0;    if { [info exists $(FME_UUID_SAFE)_commands] == 0 } {       set $(FME_UUID_SAFE)_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3a $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    package require json;    package require base64;    set pwdParms {};    foreach {parmDef} [dict get [::json::json2dict [::base64::decode {eyJwYXJhbWV0ZXJzIjpbeyJkZWZhdWx0VmFsdWUiOiJzMjAwODAzOSIsImVkaXRvciI6InBsYWludGV4dCIsImhpZGRlbiI6ZmFsc2UsIm5hbWUiOiJzb3VyY2VfUE9TVEdJUyIsInByb21wdCI6IkRhdGFiYXNlIiwicmVxdWlyZWQiOnRydWUsInNob3dFZGl0QnV0dG9uIjpmYWxzZSwic3VwcG9ydGVkVmFsdWVUeXBlcyI6WyJnbG9iYWxQYXJhbWV0ZXIiXSwidHlwZSI6InRleHQiLCJ2YWx1ZVR5cGUiOiJzdHJpbmcifSx7ImFjY2Vzc01vZGUiOiJ3cml0ZSIsImRlZmF1bHRWYWx1ZSI6IkM6XFxVc2Vyc1xca3JpbWEzNTRcXFdvcmsgRm9sZGVyc1xcRG9jdW1lbnRzXFxraWNraV9hcmJldHNmaWxlclxcc2xhc2tcXGludHJhc2lzX2FyY2hpdmVfc2xhc2suZ3BrZyIsImZpbHRlcnMiOlt7ImRlc2NyaXB0aW9uIjoiR2VvUGFja2FnZSBGaWxlcyIsImZpbHRlciI6WyIqLmdwa2ciXX0seyJkZXNjcmlwdGlvbiI6IkFsbCBmaWxlcyIsImZpbHRlciI6WyIqIl19XSwiaGlkZGVuIjpmYWxzZSwiaXRlbXNUb1NlbGVjdCI6ImZpbGVzIiwibmFtZSI6IkRlc3REYXRhc2V0X09HQ0dFT1BBQ0tBR0UiLCJwcm9tcHQiOiJHZW9QYWNrYWdlIEZpbGUiLCJyZXF1aXJlZCI6dHJ1ZSwic2VsZWN0TXVsdGlwbGUiOmZhbHNlLCJzdXBwb3J0ZWRWYWx1ZVR5cGVzIjpbImdsb2JhbFBhcmFtZXRlciJdLCJ0eXBlIjoiZmlsZSIsInZhbGlkYXRlRXhpc3RlbmNlIjpmYWxzZSwidmFsdWVUeXBlIjoic3RyaW5nIn1dfQ==}]] {parameters}] {       if {{password} == [dict get $parmDef type]} {          lappend pwdParms [dict get $parmDef name];       };    };    foreach {parmName parmValue} $parameterList {      set parmValue [quotifyForParameterFileV3a [FME_DecodeText $parmValue]];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { $parmName in $pwdParms } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend commandArguments {--FME_LAUNCH_VIEWER_APP};    lappend commandArguments {YES};    lappend $(FME_UUID_SAFE)_commands [join $commandArguments " "];    incr $(FME_UUID_SAFE)_batch_count;    if { {Yes} == {No} && {<Unused>} > 1  && $$(FME_UUID_SAFE)_batch_count <= {<Unused>} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner $commandArgumentsToLog;    };    if { {Yes} != {No} || $$(FME_UUID_SAFE)_batch_count == {<Unused>} } {       set $(FME_UUID_SAFE)_batch_count 0;       set commandFile [$(FME_UUID_SAFE)_writeCommandFile $$(FME_UUID_SAFE)_commands];       if { $commandFile == {} } {          return FAILURE;       };       set $(FME_UUID_SAFE)_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend cmdArgs {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [$(FME_UUID_SAFE)_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command
Tcl2 proc $(FME_UUID_SAFE)_flushNeeded { } {    global $(FME_UUID_SAFE)_commands;    if { [info exists $(FME_UUID_SAFE)_commands] == 1 && [llength $$(FME_UUID_SAFE)_commands] > 0 } {       return YES;    } else {       return NO;    }; }
Tcl2 proc $(FME_UUID_SAFE)_flushPending { } {    global $(FME_UUID_SAFE)_commands;    if { [info exists $(FME_UUID_SAFE)_commands] == 1 && [llength $$(FME_UUID_SAFE)_commands] > 0 } {       set workspaceToRun [lindex $$(FME_UUID_SAFE)_commands 0];       set commandFile [$(FME_UUID_SAFE)_writeCommandFile $$(FME_UUID_SAFE)_commands];       if { $commandFile == {} } {          return FAILURE;       };       set $(FME_UUID_SAFE)_commands {};       set fmeAbsPath {$(FME_HOME_UNIX)/fme};       if { {Yes} == {No} && $::__platform__ == {windows} }       {          set comment          {             Only on Windows in non-blocking mode we have to make sure that paths             are always quoted because we use non-Tcl method to run the final command          };          set commandFile \\"$commandFile\\";          set fmeAbsPath \\"$fmeAbsPath\\";       };       lappend commandArguments {*}$::__WR_ENV_HELPER__ $fmeAbsPath COMMAND_FILE $commandFile;       return [$(FME_UUID_SAFE)_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command
Tcl2 proc $(FME_UUID_SAFE)_runCommand {commandArguments workspaceFileUnix} {    if { {Yes} == {No} && $::__platform__ != {windows} } {       lappend commandArguments \">$::null_device\";       lappend commandArguments \"<$::null_device\";    };    set comment    {       The below 2>@1 forces any standard error output to go into the msg variable       or to NULL if we're running in the background.    };    if { {Yes} != {No} || $::__platform__ != {windows} } {       lappend commandArguments {2>@1};    };    if { {Yes} == {No} } {        lappend commandArguments {&};    };    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if { Yes == {No} && {<Unused>} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner $commandArguments;    };    if { $::__platform__ == {windows} && {Yes} == {No} } {       set comment       {          Only on Windows in non-blocking mode we convert Tcl list to string joined          by space (affectively flattening the list). Prior to this we have already          ensured that in this mode paths are always quoted.       };       set commandArguments [join $commandArguments " "];       set catchResult [catch {FME_Execute System RETURN_PID_IF_ASYNC $commandArguments} msg];    } else {       set catchResult [catch {eval [concat exec $commandArguments]} msg];    };    if { $catchResult } {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global $(FME_UUID_SAFE)_process_count;       incr $(FME_UUID_SAFE)_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner $workspaceFileUnix;           global $(FME_UUID_SAFE)_all_processes;           lappend $(FME_UUID_SAFE)_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file
Tcl2 proc $(FME_UUID_SAFE)_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF {*} TestFactory    FACTORY_NAME { WorkspaceRunner_ExecutorAndRouter }    INPUT  FEATURE_TYPE TestFilter_<lt>UNFILTERED<gt>    TEST @Tcl2("$(FME_UUID_SAFE)_runner {source_POSTGIS@EvaluateExpression(FDIV,STRING,<at>Value<openparen>datname<closeparen>,WorkspaceRunner)DestDataset_OGCGEOPACKAGE@EvaluateExpression(FDIV,STRING,$(DestDataset_OGCGEOPACKAGE$encode),WorkspaceRunner)} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)intrasis_archive_write_geom_v2.fmw,WorkspaceRunner)}") == SUCCESS    OUTPUT { PASSED FEATURE_TYPE WorkspaceRunner_SUCCEEDED         }    OUTPUT { FAILED FEATURE_TYPE WorkspaceRunner_FAILED         }
Tcl2 proc $(FME_UUID_SAFE)_summarizer { } {     global $(FME_UUID_SAFE)_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr $(FME_UUID_SAFE)_process_count 0;     FME_SetAttribute _proc_count [set $(FME_UUID_SAFE)_process_count];     global $(FME_UUID_SAFE)_all_processes;     if {[info exists $(FME_UUID_SAFE)_all_processes]} {         set index 0;         foreach pid [set $(FME_UUID_SAFE)_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
# ------------------------------------------------------------------------------
# Clean up the last batch, if anything was pending.
FACTORY_DEF {*} CreationFactory    FACTORY_NAME { WorkspaceRunner_CleanerUpperOfBatchesInitiator }    CREATE_AT_END yes    OUTPUT { FEATURE_TYPE WorkspaceRunner___cleanup___ }
# ------------------------------------------------------------------------------
# We only want to actually trigger the flush if there was something to run
# Otherwise we send out spurious extra features at the end of a run that are completely unnecessary
# As it stands, we are set up here to send out one "dud" completely empty feature that will
# go out FAILURE if there was a problem. It will have no attributes. Only sent out if there was something
# left to process and the run did not succeed.
FACTORY_DEF {*} TestFactory    FACTORY_NAME { WorkspaceRunner_CleanerUpperOfBatchesDoWeNeedToDoIt }    INPUT FEATURE_TYPE WorkspaceRunner___cleanup___    TEST { @Tcl2($(FME_UUID_SAFE)_flushNeeded) == YES }    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner___cleanup___
# Note that we don't output anything if we succeed -- we only catch and output the failure
FACTORY_DEF {*} TestFactory    FACTORY_NAME { WorkspaceRunner_CleanerUpperOfBatchesRunner }    INPUT FEATURE_TYPE WorkspaceRunner___cleanup___    TEST { @Tcl2($(FME_UUID_SAFE)_flushPending) == SUCCESS }    OUTPUT { FAILED FEATURE_TYPE WorkspaceRunner_FAILED         }
FACTORY_DEF {*} CreationFactory    FACTORY_NAME { WorkspaceRunner_SummaryMaker }    CREATE_AT_END yes    OUTPUT { FEATURE_TYPE WorkspaceRunner_SUMMARY        @Tcl2($(FME_UUID_SAFE)_summarizer)         }
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "WorkspaceRunner_SUCCEEDED Feature Recorder -1 2147614725" INPUT FEATURE_TYPE WorkspaceRunner_SUCCEEDED FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_WorkspaceRunner -1 5 fo 0 SUCCEEDED  0  6b39e25a70022de371b6b8cb36084e532cd1066f.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { datname,buffer }  FEAT_TYPE_DISPLAY_NAME { WorkspaceRunner_Succeeded } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "WorkspaceRunner_FAILED Feature Recorder -1 2147680261" INPUT FEATURE_TYPE WorkspaceRunner_FAILED FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_WorkspaceRunner -1 5 fo 1 FAILED  0  338651372bc265c84b19edef6b83877bd5a47590.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { datname,buffer,_failure_message,buffer }  FEAT_TYPE_DISPLAY_NAME { WorkspaceRunner_Failed } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
FACTORY_DEF {*} RecorderFactory FACTORY_NAME "WorkspaceRunner_SUMMARY Feature Recorder -1 2147745797" INPUT FEATURE_TYPE WorkspaceRunner_SUMMARY FEATURE_FILE  { "C:/Users/krima354/AppData/Local/Temp/wb-cache-1_intrasis_archive_write_geom_ru-yPhBXu/Main_WorkspaceRunner -1 5 fo 2 SUMMARY  0  a0ddcbbf2cbb7f5e4a0c08288da2cb4b226d4ce9.ffsupdating" } MODE RECORD_PASS_THROUGH STORE_SCANNED_SCHEMA YES NORMALIZE_LIST_ATTRIBUTES_ON_SCHEMA YES CREATE_SPATIAL_INDEX YES INSPECTOR YES RECORD_DIRECTLY_TO_DISK YES FSC_SCHEMA { _proc_count,uint32,_processes<opencurly><closecurly>,buffer }  FEAT_TYPE_DISPLAY_NAME { WorkspaceRunner_Summary } STORE_SCANNED_METADATA PASS_THROUGH_FME_TYPE NO_LOGGING OUTPUT RECORDED FEATURE_TYPE *
.metadata XFORMER_END WorkspaceRunner;5:Main
FACTORY_DEF * TeeFactory   FACTORY_NAME "WorkspaceRunner_SUCCEEDED Feature Counter -1 2147614725"   INPUT FEATURE_TYPE WorkspaceRunner_SUCCEEDED     @LogCount("PORT -1 2147614725")   NO_LOGGING 
FACTORY_DEF * TeeFactory   FACTORY_NAME "WorkspaceRunner_FAILED Feature Counter -1 2147680261"   INPUT FEATURE_TYPE WorkspaceRunner_FAILED     @LogCount("PORT -1 2147680261")   NO_LOGGING 
FACTORY_DEF * TeeFactory   FACTORY_NAME "WorkspaceRunner_SUMMARY Feature Counter -1 2147745797"   INPUT FEATURE_TYPE WorkspaceRunner_SUMMARY     @LogCount("PORT -1 2147745797")   NO_LOGGING 
# -------------------------------------------------------------------------

FACTORY_DEF * RoutingFactory FACTORY_NAME "Destination Feature Type Routing Correlator"   COMMAND_PARM_EVALUATION SINGLE_PASS   INPUT FEATURE_TYPE *   FEATURE_TYPE_ATTRIBUTE __wb_out_feat_type__   OUTPUT ROUTED FEATURE_TYPE *    OUTPUT NOT_ROUTED FEATURE_TYPE __nuke_me__ @Tcl2("FME_StatMessage 818059 [FME_GetAttribute fme_template_feature_type] 818060 818061 fme_warn")
# -------------------------------------------------------------------------

FACTORY_DEF * TeeFactory   FACTORY_NAME "Final Output Nuker"   INPUT FEATURE_TYPE __nuke_me__

